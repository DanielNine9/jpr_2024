/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DuAn.ui;

import DuAn.dao.NhanVienDAO;
import DuAn.entity.NhanVien;
import DuAn.entity.NhanVienFile;
import DuAn.myenum.MyType;
import static DuAn.myenum.MyType.CURRENT;
import static DuAn.myenum.MyType.DELETED;
import DuAn.utils.Auth;
import DuAn.utils.MsgBox;
import DuAn.utils.XExcel;
import DuAn.utils.XImage;
import DuAn.utils.XPDF;
import java.awt.Color;
import static java.awt.Color.white;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author dinhh
 */
public class NhanVienJDialog extends javax.swing.JFrame {

    MyType myType = MyType.ALL;
    ArrayList<NhanVien> currentList = new ArrayList<>();

    public NhanVienJDialog() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Quản Lí Nhân Viên");
        // setIcon();

        init();
        AutoCompleteDecorator.decorate(cbo);

    }

    private void setIcon() {
        NhanVienJDialog f = new NhanVienJDialog();
        Image icon = Toolkit.getDefaultToolkit().getImage("DuAn.icon\\fpt.png");
        f.setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrVaiTro = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNhanVien = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cbo = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        btnPDF = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();
        pnlEdit = new javax.swing.JPanel();
        txtID = new javax.swing.JTextField();
        txtXacNhanMatKhau = new javax.swing.JPasswordField();
        txtMatKhau = new javax.swing.JPasswordField();
        txtHoTen = new javax.swing.JTextField();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblHinhAnh = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        rdoTruongPhong = new javax.swing.JRadioButton();
        rdoNhanVien = new javax.swing.JRadioButton();
        lblTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("QUẢN LÍ NHÂN VIÊN");
        setBackground(new java.awt.Color(0, 102, 102));

        tblNhanVien.setAutoCreateRowSorter(true);
        tblNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MÃ NHÂN VIÊN", "HỌ VÀ TÊN", "VAI TRÒ", "TRẠNG THÁI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
        });
        tblNhanVien.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblNhanVienKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblNhanVien);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/icon/filter.png"))); // NOI18N
        jLabel1.setText("Lọc:");

        cbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Nhân viên còn làm", "Nhân viên đã xóa" }));
        cbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm theo tên"));

        txtTimKiem.setBorder(javax.swing.BorderFactory.createTitledBorder("Họ và tên"));
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        btnPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/icon/pdf.png"))); // NOI18N
        btnPDF.setText("PDF");
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/icon/excel.png"))); // NOI18N
        btnExcel.setText("Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlListLayout = new javax.swing.GroupLayout(pnlList);
        pnlList.setLayout(pnlListLayout);
        pnlListLayout.setHorizontalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListLayout.createSequentialGroup()
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlListLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(pnlListLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlListLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbo, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPDF)))
                .addContainerGap())
        );
        pnlListLayout.setVerticalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPDF)
                    .addComponent(btnExcel))
                .addGap(70, 70, 70))
        );

        tabs.addTab("DANH SÁCH", pnlList);

        pnlEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pnlEditKeyPressed(evt);
            }
        });

        txtID.setEditable(false);
        txtID.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        txtID.setText("ID sẽ tự sinh");
        txtID.setBorder(javax.swing.BorderFactory.createTitledBorder("Mã nhân viên"));
        txtID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIDFocusGained(evt);
            }
        });
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        txtXacNhanMatKhau.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        txtXacNhanMatKhau.setBorder(javax.swing.BorderFactory.createTitledBorder("Xác nhận mật khẩu"));
        txtXacNhanMatKhau.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtXacNhanMatKhauKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtXacNhanMatKhauKeyTyped(evt);
            }
        });

        txtMatKhau.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        txtMatKhau.setBorder(javax.swing.BorderFactory.createTitledBorder("Mật khẩu"));
        txtMatKhau.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMatKhauKeyPressed(evt);
            }
        });

        txtHoTen.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        txtHoTen.setBorder(javax.swing.BorderFactory.createTitledBorder("Họ và tên"));
        txtHoTen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHoTenKeyPressed(evt);
            }
        });

        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/icon/Accept.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/icon/Delete.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/icon/Refresh.png"))); // NOI18N
        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/icon/Add.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        btnThem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnThemKeyPressed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Segoe UI Historic", 3, 14)); // NOI18N
        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrev.setFont(new java.awt.Font("Segoe UI Historic", 3, 14)); // NOI18N
        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Segoe UI Historic", 3, 14)); // NOI18N
        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Segoe UI Historic", 1, 14)); // NOI18N
        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        lblHinhAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHinhAnh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DuAn/images/ong140.png"))); // NOI18N
        lblHinhAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHinhAnhMouseClicked(evt);
            }
        });
        jPanel1.add(lblHinhAnh);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Chức vụ"));

        bgrVaiTro.add(rdoTruongPhong);
        rdoTruongPhong.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        rdoTruongPhong.setText("Trưởng phòng");

        bgrVaiTro.add(rdoNhanVien);
        rdoNhanVien.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        rdoNhanVien.setSelected(true);
        rdoNhanVien.setText("Nhân viên");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(rdoTruongPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(rdoNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoTruongPhong)
                    .addComponent(rdoNhanVien))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlEditLayout = new javax.swing.GroupLayout(pnlEdit);
        pnlEdit.setLayout(pnlEditLayout);
        pnlEditLayout.setHorizontalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEditLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMatKhau)
                            .addComponent(txtHoTen)
                            .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                            .addComponent(txtXacNhanMatKhau)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEditLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        pnlEditLayout.setVerticalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnXoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlEditLayout.createSequentialGroup()
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtXacNhanMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLast)
                            .addComponent(btnNext)
                            .addComponent(btnPrev)
                            .addComponent(btnFirst)))
                    .addGroup(pnlEditLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnMoi)
                            .addComponent(btnSua)
                            .addComponent(btnThem))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("CẬP NHẬT", pnlEdit);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(51, 51, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("QUẢN LÍ NHÂN VIÊN QUẢN TRỊ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tabs))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jSeparator1)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(199, 199, 199))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean checkTrungMa(JTextField txt) {//kiểm tra trùng mã nhân viên
        txt.setBackground(white);
        if (dao.selectById(Integer.parseInt(txt.getText())) == null) {
            return true;
        } else {
            txt.setBackground(Color.pink);
            MsgBox.showMessageDialog(this, "Mã nhân viên " + txt.getText() + " đã tồn tại");
            return false;
        }
    }

    public boolean validateForm() {//kiểm tra nhập liệu để trống
        if (txtID.getText().isEmpty() || txtHoTen.getText().isEmpty() || txtMatKhau.getText().isEmpty() || txtXacNhanMatKhau.getText().isEmpty()) {
            return false;
        }
        return true;
    }
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        String s1 = txtMatKhau.getText();
        String s2 = txtXacNhanMatKhau.getText();
        if (s1.equals(s2) == false) {
            MsgBox.showMessageDialog(this, "Mật khẩu không khớp");
            txtXacNhanMatKhau.requestFocus();
            return;
        }
        if (validateForm()) {
            insert();
        } else {
            MsgBox.showMessageDialog(this, "Bạn chưa nhập đầy đủ thông tin !");
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
//        String s1 = txtMatKhau.getText();
//        String s2 = txtXacNhanMatKhau.getText();
//        if (s1.equals(s2) == false) {
//            MsgBox.showMessageDialog(this, "Mật khẩu không khớp");
//            txtXacNhanMatKhau.requestFocus();
//            return;
//        }
        if (MsgBox.showConfirmDialog(this, "Bạn có muốn cập nhật nhân viên này")) {
            this.update();
            this.edit();
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        this.delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        this.clearForm();
        generateId();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        if (evt.getClickCount() == 1) {
            btnXoa.setVisible(true);
            this.row = tblNhanVien.getSelectedRow();
            tabs.setSelectedIndex(1);
            this.edit();
        }
    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void txtIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIDFocusGained
        txtID.setBackground(white);
    }//GEN-LAST:event_txtIDFocusGained
    private File file;

    void chonAnh() {

        JFileChooser jfc = new JFileChooser("images");
        // mở đến thư mục theo đường dẫn 
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            file = jfc.getSelectedFile();
//            XImage.save(file); //lưu hình ảnh vào thư mục images
            ImageIcon icon = XImage.read(file.getName()); //đọc hình từ logo
            try {
                Image img = ImageIO.read(file);
                int width = lblHinhAnh.getWidth();
                int height = lblHinhAnh.getHeight();
                lblHinhAnh.setIcon(new ImageIcon(img.getScaledInstance(width, height, 0))); //set hình vừa với khung của jlabel
                lblHinhAnh.setToolTipText(XImage.save(file)); //giữ tên hình trong tooltip
            } catch (IOException ex) {
                MsgBox.showErrorDialog(this, ex.getMessage(), "Error");
            }
//                lblHinhAnh.setIcon(icon);

        }
    }
    private void lblHinhAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHinhAnhMouseClicked
        // TODO add your handling code here:
        chonAnh();
    }//GEN-LAST:event_lblHinhAnhMouseClicked

    private void cboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboActionPerformed
        // TODO add your handling code here:
        switch (this.cbo.getSelectedIndex()) {
            case 0:
                myType = MyType.ALL;
                break;
            case 1:
                myType = MyType.CURRENT;
                break;
            default:
                myType = MyType.DELETED;
                break;
        }
        fillTable(myType);
        // TODO add your handling code here:
    }//GEN-LAST:event_cboActionPerformed

    private void tblNhanVienKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblNhanVienKeyPressed
        // TODO add your handling code here:
        System.out.println(evt.getKeyChar());
    }//GEN-LAST:event_tblNhanVienKeyPressed

    private void handleTimKiem(String search) {
        DefaultTableModel model = (DefaultTableModel) this.tblNhanVien.getModel();
        model.setRowCount(0);
        try {

            //tìm người học theo keywork
            //nếu ko có keywork thì sẽ là tất cả người học
            ArrayList<NhanVien> list = new ArrayList<>();
            for (NhanVien nh : currentList) {
                if (nh.getHoTen().toLowerCase().contains(search.toLowerCase())) {
                    list.add(nh);
                }
            }

            if (!list.isEmpty()) {
                for (NhanVien nv : list) {
                    Object[] row = {
                        "NV" + nv.getMaNV(),
                        nv.getHoTen(),
                        nv.isVaiTro() ? "Trưởng phòng" : "Nhân viên",
                        nv.isDeleted() ? "Không còn làm" : "Còn làm"
                    };
                    model.addRow(row);
                }
            }
        } catch (Exception e) {
            MsgBox.showMessageDialog(this, "Lỗi truy vấn dữ liệu");
        }
    }

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        // TODO add your handling code here:
        handleTimKiem(this.txtTimKiem.getText());
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed
        // TODO add your handling code here:
        // Get data from DAO
        List<NhanVien> employeeList = dao.selectAll();

        // Convert NhanVien objects to NhanVienPDF objects
        List<NhanVienFile> pdfList = convertToNhanVienFile(employeeList);

        // Generate PDF for employees
        String title = "Thong tin nhan vien";
        String filePath = "DachSachNhanVien.pdf";
        XPDF.generatePdf(this, title, pdfList, filePath);
    }//GEN-LAST:event_btnPDFActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        // TODO add your handling code here:
        List<NhanVien> employeeList = dao.selectAll();

        // Create an instance of NhanVien to pass to the writeExcel method
        NhanVienFile instance = new NhanVienFile(); // Assuming NhanVien has a no-argument constructor

        try {
            // Specify the file path where the Excel file will be saved
            String filePath = "DachSachNhanVien.xlsx";
            List<NhanVienFile> empFile = convertToNhanVienFile(employeeList);
            // Call the writeExcel method from XExcel class
            String excelFilePath = XExcel.writeExcel(this, empFile, filePath, instance);

            // Print the path where the Excel file is saved
            System.out.println("Excel file created successfully at: " + excelFilePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelActionPerformed

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnThemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnThemKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnThemKeyPressed

    private void txtMatKhauKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMatKhauKeyPressed
        // TODO add your handling code here:   
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (btnThem.isEnabled()) {
                btnThemActionPerformed(null);
            } else {
                btnSuaActionPerformed(null);
            }
        }
    }//GEN-LAST:event_txtMatKhauKeyPressed

    private void txtXacNhanMatKhauKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtXacNhanMatKhauKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (btnThem.isEnabled()) {
                btnThemActionPerformed(null);
            } else {
                btnSuaActionPerformed(null);
            }
        }
    }//GEN-LAST:event_txtXacNhanMatKhauKeyPressed

    private void txtHoTenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHoTenKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (btnThem.isEnabled()) {
                btnThemActionPerformed(null);
            } else {
                btnSuaActionPerformed(null);
            }
        }
    }//GEN-LAST:event_txtHoTenKeyPressed

    private void pnlEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlEditKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlEditKeyPressed

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
        // TODO add your handling code here:
        evt.consume();
    }//GEN-LAST:event_txtIDKeyTyped

    private void txtXacNhanMatKhauKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtXacNhanMatKhauKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtXacNhanMatKhauKeyTyped

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private List<NhanVienFile> convertToNhanVienFile(List<NhanVien> employeeList) {
        List<NhanVienFile> pdfList = new ArrayList<>();
        for (NhanVien nv : employeeList) {
            NhanVienFile pdf = new NhanVienFile(nv);
            pdfList.add(pdf);
        }
        return pdfList;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NhanVienJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NhanVienJDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrVaiTro;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPDF;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblHinhAnh;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlEdit;
    private javax.swing.JPanel pnlList;
    private javax.swing.JRadioButton rdoNhanVien;
    private javax.swing.JRadioButton rdoTruongPhong;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblNhanVien;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtID;
    private javax.swing.JPasswordField txtMatKhau;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JPasswordField txtXacNhanMatKhau;
    // End of variables declaration//GEN-END:variables

    void init() {
        this.clearForm();
        fillTable(myType);
        txtMatKhau.requestFocus();
        btnXoa.setVisible(false);
        updateStatus();
        NhanVien nv = Auth.user;
        if (!nv.isVaiTro()) {
            MsgBox.showErrorDialog(this, "Bạn không có quyền", "Lỗi");
            this.dispose();
        }
    }

    //chỉ trưởng phòng mới đc xem mật khẩu người khác
    public String matKhauToSao(String pass) {
        String sao = "";
        for (int i = 0; i < pass.length(); i++) {
            sao += "*";
        }
        return sao;
    }

    NhanVienDAO dao = new NhanVienDAO();

    void fillTable(MyType type) {
        //lấy list nhanVien từ CSDL điền vào bảng
        //LƯU Ý: CHỈ TRƯỞNG PHÒNG MỚI XEM ĐƯỢC MẬT KHẨU CỦA NGƯỜI KHÁC
        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        model.setRowCount(0);
        NhanVien currentUser = Auth.user;
        try {
            List<NhanVien> list = new ArrayList<>();//đọc dữ liệu từ CSDL
            switch (type) {
                case CURRENT:
                    for (NhanVien cd : dao.selectAll()) {
                        if (!cd.isDeleted()) {
                            list.add(cd);
                        }
                    }
                    break;
                case DELETED:
                    for (NhanVien cd : dao.selectAll()) {
                        if (cd.isDeleted()) {
                            list.add(cd);
                        }
                    }
                    break;
                default:
                    list = dao.selectAll();
                    break;
            }
            currentList = (ArrayList<NhanVien>) list;
            for (NhanVien nv : currentList) {
                if (currentUser.getMaNV() == nv.getMaNV()) {
                    continue;
                }
                Object[] row = {
                    "NV" + nv.getMaNV(),
                    nv.getHoTen(),
                    nv.isVaiTro() ? "Trưởng phòng" : "Nhân viên",
                    nv.isDeleted() ? "Không còn làm" : "Còn làm"
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            MsgBox.showMessageDialog(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }
    }

    NhanVien getForm() {
        //lấy thông tin trên form cho vào đt nhanVien
        //return nhanVien

        NhanVien nv = new NhanVien();
        nv.setHoTen(txtHoTen.getText());
        nv.setMatKhau(txtMatKhau.getText());
        nv.setHinh(lblHinhAnh.getToolTipText());
        boolean vaitro = true; //mac dinh la nv
        if (rdoTruongPhong.isSelected()) {
            vaitro = true;//Nam
        } else {
            vaitro = false;
        }
        nv.setVaiTro(vaitro);
        nv.setHinh(lblHinhAnh.getToolTipText() == null || lblHinhAnh.getToolTipText().isEmpty() || lblHinhAnh.getToolTipText().isBlank() ? "ong140.png" : lblHinhAnh.getToolTipText());
        return nv;
    }

    private void generateId() {
        try {
            String id = dao.generateNewUserId();
            txtID.setText(id);
        } catch (SQLException ex) {
            Logger.getLogger(NhanVienJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void setForm(NhanVien nv) {
        //đưa thông tin nhanVien lên form theo model

        txtID.setText("NV" + String.valueOf(nv.getMaNV()));
        txtHoTen.setText(nv.getHoTen());
        txtMatKhau.setText(nv.getMatKhau());
        txtXacNhanMatKhau.setText(nv.getMatKhau());
        if (nv.isDeleted()) {
            btnXoa.setText("Khôi phục");
        } else {
            btnXoa.setText("Xóa");
        }
        setIconXoa();
        if (nv.isVaiTro() == true) {
            rdoTruongPhong.setSelected(true);
        } else {
            rdoNhanVien.setSelected(true);
        }
        String hinh = nv.getHinh() == null || nv.getHinh().isBlank() || nv.getHinh().isEmpty() ? "ong140.png" : nv.getHinh();
        lblHinhAnh.setToolTipText(hinh);
        setImg(hinh);

    }

    private void setIconXoa() {
        ImageIcon img;
        if (btnXoa.getText() == "Khôi phục") {
            img = new ImageIcon("icon/Bell.png");
        } else {
            img = new ImageIcon("icon/Delete.png");
        }
        btnXoa.setIcon(new ImageIcon(img.getImage()));
    }

    int row = -1; //chứa vị trị hiện hành của nhân viên

    void edit() {//điền thông tin đt nhanVien lên form (theo vị trí row)
        setImg("ong140.png");
        try {
            String maNV = ((String) tblNhanVien.getValueAt(this.row, 0)).substring(2);
            NhanVien nv = dao.selectById(Integer.parseInt(maNV));
            this.setForm(nv);
            this.updateStatus();
            if (nv.isVaiTro()) {
                btnSua.setEnabled(false);
                btnXoa.setEnabled(false);
            } else {
                btnSua.setEnabled(true);
                btnXoa.setEnabled(true);
            }

            if (nv.getHinh() != null) {
                String hinh = String.valueOf(nv.getHinh()); //Screenshot 2023-07-07 153852.png
//                lblHinhAnh.setToolTipText(nv.getHinh());
//                lblHinhAnh.setIcon(XImage.read(nv.getHinh()));//Khúc này có vấn đề
                setImg(hinh);
            }
            txtID.setText("NV" + nv.getMaNV());
        } catch (NumberFormatException ex) {
            MsgBox.showMessageDialog(this, ex.getMessage());

        } catch (Exception e) {
            MsgBox.showMessageDialog(this, "Lỗi truy vấn dữ liệu");
            e.printStackTrace();
        }

    }

    private void setImg(String path) {
        ImageIcon img = new ImageIcon("images\\" + path);
        Image img1 = img.getImage();
        Image img2 = img1.getScaledInstance(148, 191, Image.SCALE_SMOOTH);
        lblHinhAnh.setIcon(new ImageIcon(img2));
        lblHinhAnh.setToolTipText(path);
    }

    void first() {
        this.row = 0;
        this.edit();
    }

    void prev() {
        if (this.row > 0) {
            this.row--;
            this.edit();
        }
    }

    void next() {
        if (this.row < tblNhanVien.getRowCount() - 1) {
            this.row++;
            this.edit();
        }
    }

    void last() {
        this.row = tblNhanVien.getRowCount() - 1;
        this.edit();
    }

    void insert() {
        //lấy thông tin trên form để
        //thêm (đăng kí) nhân viên - trưởng phòng vào CSDL
        NhanVien model = getForm();
        try {

            dao.insert(model);
            this.fillTable(myType);
            this.clearForm();
            MsgBox.showMessageDialog(this, "Thêm mới nhân viên thành công");
        } catch (Exception e) {
            MsgBox.showMessageDialog(this, "Thêm mới nhân viên thất bại !");
            e.printStackTrace();
        }
    }

    void update() {
        //lấy thông tin trên form để
        //cập nhật nhanVien theo maNV
        NhanVien model = getForm();
        try {
            model.setMaNV(new Integer(txtID.getText().substring(2)));
            dao.update(model);
            this.fillTable(myType);
//            this.clearForm();
            MsgBox.showMessageDialog(this, "Cập nhật nhân viên thành công");
        } catch (Exception e) {
            MsgBox.showMessageDialog(this, "Cập nhật nhân viên thất bại !");
            e.printStackTrace();
        }
    }

    void delete() {
        //lấy maNV trên form, xóa nv theo maNV
        //xóa trắng form
        if (!Auth.isManager()) { //kiểm tra nếu là trưởng phòng mới có quyền xóa
            MsgBox.showMessageDialog(this, "Bạn không có quyền xóa nhân viên");
        } else {
            Integer manv = Integer.valueOf(txtID.getText().substring(2));
            if (manv.equals(Auth.user.getMaNV())) {
                MsgBox.showMessageDialog(this, "Bạn không được xóa chính mình");
            } else if ((this.btnXoa.getText().equalsIgnoreCase("Xóa") && MsgBox.showConfirmDialog(this, "Bạn thực sự muốn xóa nhân viên này"))
                    || MsgBox.showConfirmDialog(this, "Bạn thực sự muốn khôi phục nhân viên này")) {
                try {
                    if (this.btnXoa.getText().equalsIgnoreCase("Xóa")) {
                        dao.delete(manv, true);
                        MsgBox.showMessageDialog(this, "Xóa thành công nhân viên");
                        this.btnXoa.setText("Khôi phục");
                        fillTable(myType);
                    } else {
                        dao.delete(manv, false);
                        MsgBox.showMessageDialog(this, "Khôi phục thành công nhân viên");
                        btnXoa.setText("Xóa");
                        fillTable(myType);
                    }

                    setIconXoa();
                } catch (Exception e) {
                    MsgBox.showMessageDialog(this, "Không thể xóa nhân viên");
                }
            }
        }
    }

    void updateStatus() {  //cập nhật trạng thái form
        boolean edit = (this.row >= 0); //đang chọn một hàng nào đó ->> trạng thái edit
        boolean first = (this.row == 0); //đang ở bản ghi đầu tiên 
        boolean last = (this.row == tblNhanVien.getRowCount() - 1); // đang ở bản ghi cuối cùng

        //trạng thái form
        txtID.setEditable(!edit);
        btnThem.setEnabled(!edit);
        btnSua.setEnabled(edit);
        btnXoa.setEnabled(edit);
        txtMatKhau.setEnabled(!edit);
        txtXacNhanMatKhau.setEnabled(!edit);

        //trạng thái điều hướng 
        btnFirst.setEnabled(edit && !first);
        btnPrev.setEnabled(edit && !first);
        btnNext.setEnabled(edit && !last);
        btnLast.setEnabled(edit && !last);

        generateId();
    }

    void clearForm() { //xóa trắng form
        this.setForm(new NhanVien());
        this.row = -1;
        this.txtID.setText("ID sẽ tự sinh");
        this.updateStatus();
        rdoNhanVien.setSelected(true);
        txtID.setBackground(white);
        txtXacNhanMatKhau.setBackground(white);
        txtMatKhau.requestFocus();
        btnXoa.setVisible(false);
        txtHoTen.requestFocus();
        setImg("ong140.png");
    }
}
